(define-module (icnu stepper)
  #:use-module (icnu icnu)
  #:use-module (icnu rewrite)
  #:use-module (icnu utils format)
  #:use-module (icnu utils log)
  #:export (reduce-once reduce-to-normal-form))

(define (read-sexpr-from-string s)
  (call-with-input-string s read))

(define (apply-reduction-step! net)
  (let ((changed? #f))
    (when (rewrite-pass-copy-fold! net) (set! changed? #t))
    (when (rewrite-pass-const-fold! net) (set! changed? #t))
    (when (rewrite-pass-if-fold! net) (set! changed? #t))
    (when (rewrite-pass-AA-merge! net) (set! changed? #t))
    (when (rewrite-pass-wire-cleanup! net) (set! changed? #t))
    changed?))

(define (reduce-once icnu-string)
  (let* ((sexpr (read-sexpr-from-string icnu-string))
         (net (parse-net sexpr)))
    (apply-reduction-step! net)
    (format-string #f "~a" (pretty-print net '((show-nu? . #t))))))

(define (reduce-to-normal-form icnu-string)
  (let* ((sexpr (read-sexpr-from-string icnu-string))
         (net (parse-net sexpr)))
    (let loop ((i 0))
      (if (> i 100)
          (begin
            (warnf "reduce-to-normal-form: exceeded max iterations\n")
            net)
          (if (apply-reduction-step! net)
              (loop (+ i 1))
              net)))
    (format-string #f "~a" (pretty-print net '((show-nu? . #t))))))
