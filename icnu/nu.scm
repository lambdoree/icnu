(define-module (icnu nu)
  #:use-module (icnu ic)
  #:use-module (icnu utils internal)
  #:use-module (icnu utils format)
  #:use-module (icnu utils log)
  #:use-module (ice-9 match)
  #:export (mk-nu
            mark-nu! inherit-nu! unmark-nu! node-nu?
            parse-net/nu))

(define (mk-nu names body) `(nu ,names ,body))

(define (node-nu? net name)
  (let* ((meta (node-meta net name))
         (pair (and (list? meta) (assq 'nu? meta))))
    (and pair (cdr pair))))

(define (unmark-nu! net name)
  (set-node-meta! net name (plist-remove (node-meta net name) 'nu?))
  net)

(define (mark-nu! net name)
  (debugf 2 "mark-nu!: marking ~a as nu-bound\n" name)
  (set-node-meta! net name (plist-put (node-meta net name) 'nu? #t))
  net)

(define (inherit-nu! net new-node . parent-nodes)
  (when (icnu-any (lambda (p) (node-nu? net p)) parent-nodes)
    (debugf 2 "inherit-nu!: ~a inherits nu from ~a\n" new-node parent-nodes)
    (mark-nu! net new-node)))

(define (unquote-if-needed x)
  (if (and (pair? x) (eq? (car x) 'quote) (not (null? (cdr x))))
      (cadr x)
      x))

(define (ensure-free-name-node! n name)
  (unless (node-agent n name)
    (add-node! n name 'V)))

(define (parse-endpoint n ep)
  (let* ((pair (match ep
                 (('quote p) p)
                 (('list . p) p)
                 (_ ep)))
         (a-form (and (pair? pair) (car pair)))
         (p-form (and (pair? pair) (pair? (cdr pair)) (cadr pair))))
    (if (and a-form p-form)
        (let ((a (unquote-if-needed a-form))
              (p (unquote-if-needed p-form)))
          (unless (and (symbol? a) (valid-port? p))
            (error "parse: bad endpoint form" ep))
          (ensure-free-name-node! n a)
          (endpoint a p))
        (error "parse-endpoint: Malformed endpoint. Expected a list like ('node-name 'port) or (list 'node-name 'port)." ep))))

(define (parse-wire-args n args)
  (let ((len (length args)))
    (cond
     ((= len 4)
      (let ((a (unquote-if-needed (list-ref args 0)))
            (p (unquote-if-needed (list-ref args 1)))
            (b (unquote-if-needed (list-ref args 2)))
            (q (unquote-if-needed (list-ref args 3))))
        (unless (and (symbol? a) (symbol? p) (symbol? b) (symbol? q))
          (error "parse-wire-args: Bad 4-argument wire form. Expected (wire 'a 'p 'b 'q)." args))
        (values (endpoint a p) (endpoint b q))))
     ((= len 3)
      (if (list? (list-ref args 2)) ; (a p ep2) form
          (let ((a (unquote-if-needed (list-ref args 0)))
                (p (unquote-if-needed (list-ref args 1)))
                (ep2 (list-ref args 2)))
            (unless (and (symbol? a) (symbol? p)) (error "parse-wire-args: Bad 3-argument wire form. Expected (wire 'a 'p ('b 'q))." args))
            (values (endpoint a p) (parse-endpoint n ep2)))
          (let ((ep1 (list-ref args 0))
                (b (unquote-if-needed (list-ref args 1)))
                (q (unquote-if-needed (list-ref args 2))))
            (unless (and (list? ep1) (symbol? b) (symbol? q))
              (error "parse-wire-args: Bad 3-argument wire form. Expected (wire ('a 'p) 'b 'q)." args))
            (values (parse-endpoint n ep1) (endpoint b q)))))
     ((= len 2)
      (let ((ep1 (list-ref args 0))
            (ep2 (list-ref args 1)))
        (values (parse-endpoint n ep1) (parse-endpoint n ep2))))
     (else
      (error "parse-wire-args: Invalid wire form. Must have 2, 3, or 4 arguments." args)))))

(define (parse-1/nu n form use-nu?)
  (match form
    ((or ('node name-form agent-form . rest)
         ('mk-node name-form agent-form . rest))
     (let ((name (unquote-if-needed name-form))
           (agent (unquote-if-needed agent-form)))
       (when (and (symbol? name) (symbol? agent))
         (add-node! n name agent)
         (when (pair? rest)
           (let ((tag (unquote-if-needed (car rest))))
             (set-node-tag! n name tag)
             (when (pair? (cdr rest))
               (let ((meta (unquote-if-needed (cadr rest))))
                 (set-node-meta! n name meta)))))))
     n)
    ((or ('wire . args)
         ('mk-wire . args))
     (call-with-values (lambda () (parse-wire-args n args))
       (lambda (e1 e2)
         (link-peers! n e1 e2)
         n)))
    ((or ('par . es)
         ('mk-par . es))
     (icnu-fold (lambda (form acc) (parse-1/nu acc form use-nu?)) n es))
    ((or ('nu names-form body)
         ('mk-nu names-form body))
     (if use-nu?
         (let ((names (unquote-if-needed names-form)))
           (unless (list? names) (error "parse: nu names must be a list" names-form))
           (for-each (lambda (nm) (mark-nu! n nm)) names)
           (parse-1/nu n body use-nu?))
         (error "nu binder encountered, but nu-support is disabled" form)))
    (else (error "parse-1/nu: Unrecognized form. Expected (node ...), (wire ...), (par ...), or (nu ...)." form))))

(define (parse-net/nu sexpr . maybe-use-nu)
  (let ((use-nu? (if (null? maybe-use-nu) #t (car maybe-use-nu))))
    (parse-1/nu (empty-net use-nu?) sexpr use-nu?)))
