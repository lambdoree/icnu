(define-module (icnu utils debug)
  #:use-module (icnu icnu)
  #:use-module (icnu utils format)
  #:use-module (icnu utils strings)
  #:export (net-summary-string dump-links print-step-sequence time-thunk))

(define (time-thunk thunk)
  (let ((t0 (current-time)))
    (let ((res (thunk)))
      (let ((t1 (current-time)))
        (format-string #t "  elapsed: ~a seconds~%" (- t1 t0))
        res))))

(define (net-summary-string net)
  (let ((cntA 0) (cntC 0) (cntE 0) (cntV 0))
    (hash-for-each
     (lambda (_ agent)
       (cond
        ((eq? agent 'A) (set! cntA (+ cntA 1)))
        ((eq? agent 'C) (set! cntC (+ cntC 1)))
        ((eq? agent 'E) (set! cntE (+ cntE 1)))
        ((eq? agent 'V) (set! cntV (+ cntV 1)))))
     (net-nodes net))
    (format-string #f "A:~a C:~a E:~a V:~a" cntA cntC cntE cntV)))

(define (dump-links net)
  (let ((acc '()))
    (hash-for-each
     (lambda (a b)
       (when (and (pair? a) (pair? b))
         (set! acc (cons (format-string #f "~a/~a -> ~a/~a"
                                        (car a) (cdr a) (car b) (cdr b)) acc))))
     (net-links net))
    (if (null? acc) "no links" (string-join-list (reverse acc) ", "))))

(define (print-step-sequence seq)
  (let loop ((lst seq) (i 0))
    (when (pair? lst)
      (let ((net (car lst)))
        (format-string #t "~%---- Step ~a ----~%" i)
        (format-string #t "Summary: ~a~%" (net-summary-string net))
        (format-string #t "Pretty: ~a~%" (format-string #f "~a" (pretty-print net '((show-nu? . #t)))))
        (format-string #t "Links: ~a~%" (dump-links net))
        (let ((pairs (find-active-pairs net)))
          (format-string #t "Active pairs (count: ~a): ~a~%" (length pairs) pairs)
          (let loop2 ((ps pairs) (j 0))
            (when (pair? ps)
              (format-string #t "  Pair ~a: ~a~%" j (car ps))
              (loop2 (cdr ps) (+ j 1))))))
      (loop (cdr lst) (+ i 1)))))
