(define-module (icnu stdlib unit)
  #:use-module (icnu stdlib ic-lib)
  #:use-module (icnu utils helpers)
  #:use-module (icnu utils format)
  #:use-module (icnu utils internal)
  #:use-module (icnu utils compat)
  #:export (IC_UNIT IC_CALL_UNIT))

(define (IC_UNIT name in-names out-names ret-name body)
  (let* ((body-forms (if (and (pair? body) (eq? (car body) 'par)) (cdr body) (if body (list body) '())))
         (frame-node (string->symbol (format-string #f "~a-frame" name)))
         (in-pack-g (icnu-gensym "in-pack-"))
         (out-pack-g (icnu-gensym "out-pack-"))
         (ret-g (icnu-gensym "ret-")))
    (let* ((rename-map (list (cons 'in-pack in-pack-g)
                             (cons 'out-pack out-pack-g)
                             (cons ret-name ret-g)))
           (walk-rename
            (letrec ((go (lambda (x)
                           (cond
                            ((pair? x) (cons (go (car x)) (go (cdr x))))
                            ((symbol? x)
                             (let ((p (assq x rename-map)))
                               (if p (cdr p) x)))
                            (else x)))))
              go))
           (body2 (map walk-rename body-forms))
           (unpack-forms
            `(
              ,@(IC_PURE_FST (list frame-node 'l) in-pack-g)
              ,@(IC_PURE_SND (list frame-node 'l) out-pack-g))))
      (list
       `(node ,name C)
       `(par
         ,@unpack-forms
         ,@body2
         (node ,ret-g C))
       `(wire (,ret-g l) (,name p))))))

(define (IC_CALL_UNIT unit-name in-pack out-pack result)
  (let ((frame (string->symbol (format-string #f "~a-frame" unit-name))))
    (let* ((in-ep  (if (symbol? in-pack)  `(,in-pack p)  in-pack))
           (out-ep (if (symbol? out-pack) `(,out-pack p) out-pack))
           (in-copy (icnu-gensym "in-copy-"))
           (fst    (string->symbol (format-string #f "~a-pair-fst-c" frame)))
           (snd    (string->symbol (format-string #f "~a-pair-snd-c" frame)))
           (merge  (string->symbol (format-string #f "~a-pair-merge-c" frame))))
      (append
       (list `(wire (,unit-name l) (,result p)))
       (list `(node ,in-copy C)
             (wire-or-list in-ep in-copy))
       (list `(node ,frame C)
             `(node ,fst C)
             `(node ,snd C)
             `(node ,merge C)
             (wire-or-list `(,in-copy l) fst)
             (wire-or-list out-ep snd)
             `(wire (,fst r) (,merge l))
             `(wire (,snd r) (,merge r))
             `(wire (,merge p) (,unit-name r)))))))
