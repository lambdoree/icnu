(define-module (icnu literals)
  #:use-module ((icnu ic) #:prefix ic:)
  #:use-module (icnu utils internal)
  #:use-module (ice-9 match)
  #:export (ic-literal? ic-literal-value ic-make-literal-node!))

(define (ic-literal? net name)
  (let ((tag (ic:node-tag net name)))
    (memq tag '(lit/bool lit/num lit/str lit/pair))))

(define (ic-literal-value net name)
  (if (ic-literal? net name)
      (let ((meta (ic:node-meta net name)))
        (if (and (pair? meta) (eq? (car meta) 'quote))
            (cadr meta)
            meta))
      name))

(define (ic-make-literal-node! net name lit-tag lit-val)
  (ic:add-node! net name 'A)
  (ic:set-node-tag! net name lit-tag)
  (ic:set-node-meta! net name lit-val)
  net)
